import cv2
import numpy as np
import mediapipe as mp
from pythonosc import udp_client
from collections import deque
import time

# Initialize MediaPipe and OSC
mp_pose = mp.solutions.pose
client = udp_client.SimpleUDPClient("127.0.0.1", 12345)

# Smoothing parameters
SMOOTHING_WINDOW_SIZE = 6
landmark_history = {i: deque(maxlen=SMOOTHING_WINDOW_SIZE) for i in range(33)}

# Conexiones de los nodos del cuerpo (según MediaPipe)
POSE_CONNECTIONS = mp_pose.POSE_CONNECTIONS

def smooth_landmarks(landmarks):
    smoothed_landmarks = []
    for i, lm in enumerate(landmarks):
        if len(landmark_history[i]) == SMOOTHING_WINDOW_SIZE:
            landmark_history[i].popleft()
        landmark_history[i].append(np.array([lm.x, lm.y]))
        smoothed_landmarks.append(np.mean(landmark_history[i], axis=0))
    return smoothed_landmarks

def normalize(value, min_value, max_value):
    return ((value - min_value) / (max_value - min_value)*  10)

def get_pose_name(index):
    pose_names = {
        0: "Cabeza", 1: "HombroIz", 2: "CodoIz", 3: "MunecaIz", 4: "CaderaIz",
        5: "RodillaIz", 6: "TobilloIz", 7: "PieIz/dedos", 8: "PieIz/talon",
        9: "HombroDe", 10: "CodoDe", 11: "MunecaDe", 12: "CaderaDe", 13: "RodillaDe",
        14: "TobilloDe", 15: "PieDe/dedos", 16: "PieDe/talon", 17: "OjoIz", 18: "OjoDe",
        19: "OrejaIz", 20: "OrejaDe", 21: "Boca", 22: "Nariz", 23: "TalónIz", 
        24: "TalónDe", 25: "PieIz/borde", 26: "PieDe/borde", 27: "PieIz/punta",
        28: "PieDe/punta", 29: "PieIz/planta", 30: "PieDe/planta", 31: "ManoIz/dedos", 
        32: "ManoDe/dedos"
    }
    return pose_names.get(index, f"Punto{index}")

def send_message_with_retry(client, address, value, retries=3, delay=0.01):
    for attempt in range(retries):
        try:
            client.send_message(address, value)
            break
        except BlockingIOError:
            if attempt < retries - 1:
                print(f"BlockingIOError: Retry {attempt + 1}")
                time.sleep(delay)
            else:
                print("Failed to send message after retries")

# Nueva función para visualizar los puntos sin suavizado
def draw_original_landmarks(frame, landmarks, frame_width, frame_height):
    for lm in landmarks:
        x, y = lm.x, lm.y
        cv2.circle(frame, (int(x * frame_width), int(y * frame_height)), 3, (255, 0, 0), -1)  # Azul

def draw_landmark_lines(frame, landmarks, connections, frame_width, frame_height, color):
    for connection in connections:
        start_idx, end_idx = connection
        start_landmark = landmarks[start_idx]
        end_landmark = landmarks[end_idx]

        start_point = (int(start_landmark[0] * frame_width), int(start_landmark[1] * frame_height))
        end_point = (int(end_landmark[0] * frame_width), int(end_landmark[1] * frame_height))

        cv2.line(frame, start_point, end_point, color, 2)

def main():
    video_paths = [
      #  '/Users/admin/Downloads/dance19.mp4',
       # '/Users/admin/Downloads/dance26.mp4'
        #'/Users/admin/Downloads/dance25.mp4',
       # '/Users/admin/Downloads/dance24.mp4',
        '/Users/admin/Downloads/dance20.mp4'
    ]
    current_video_index = 0
    cap = cv2.VideoCapture(video_paths[current_video_index])
    pose = mp_pose.Pose(static_image_mode=False, min_detection_confidence=0.5, min_tracking_confidence=0.5)

    while True:
        ret, frame = cap.read()
        if not ret:
            current_video_index = (current_video_index + 1) % len(video_paths)
            cap = cv2.VideoCapture(video_paths[current_video_index])
            continue

        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        results = pose.process(rgb_frame)

        if results.pose_landmarks:
            landmarks = results.pose_landmarks.landmark

            # Suavizar los puntos
            smoothed_landmarks = smooth_landmarks(landmarks)

            frame_height, frame_width, _ = frame.shape

            # Dibujar los puntos suavizados (con retraso) en verde
            for i, lm in enumerate(smoothed_landmarks):
                x, y = lm
                cv2.circle(frame, (int(x * frame_width), int(y * frame_height)), 3, (0, 255, 0), -1)

            # Dibujar los puntos originales (sin suavizado) en azul
            draw_original_landmarks(frame, landmarks, frame_width, frame_height)

            # Dibujar las líneas entre los puntos suavizados en verde
            draw_landmark_lines(frame, smoothed_landmarks, POSE_CONNECTIONS, frame_width, frame_height, (0, 255, 0))

            # Dibujar las líneas entre los puntos originales en azul
            original_landmarks = [(lm.x, lm.y) for lm in landmarks]  # Convertir landmarks a pares (x, y)
            draw_landmark_lines(frame, original_landmarks, POSE_CONNECTIONS, frame_width, frame_height, (255, 0, 0))

            # Enviar los puntos suavizados por OSC
            for i, lm in enumerate(smoothed_landmarks):
                x, y = lm
                x_normalized = normalize(x, 0, 1)
                y_normalized = normalize(y, 0, 1)

                pose_name = get_pose_name(i)
                send_message_with_retry(client, f"/pose/{pose_name}/x", x_normalized)
                send_message_with_retry(client, f"/pose/{pose_name}/y", y_normalized)

        cv2.imshow('Video', frame)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()
